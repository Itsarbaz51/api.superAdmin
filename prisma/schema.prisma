generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Role {
    id          String       @id @default(uuid())
    name        String       @unique
    users       User[]
    commissions Commission[]

    @@map("roles")
}

model User {
    id            String     @id @default(cuid())
    name          String
    email         String     @unique
    phone         String     @unique
    password      String
    domainName    String     @unique
    roleId        String
    parentId      String?    @unique
    subParentId   String?    @unique
    walletBalance Float      @default(0)
    status        UserStatus @default(IN_ACTIVE)
    isDeleted     Boolean    @default(false)
    isKycVerified Boolean    @default(false)
    isAuthorized  Boolean    @default(false)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    // Relations
    role        Role          @relation(fields: [roleId], references: [id])
    bankDetails BankDetail?
    kycDetails  KycDetail?
    wallet      Wallet?
    logs        UserLog[]
    services    UserService[]
    commissions Commission[]
    payouts     Payout[]
    topups      WalletTopup[]

    @@map("users")
}

model Service {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?  @db.LongText
    svgImage    String?  @db.LongText
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    users       UserService[]
    commissions Commission[]

    @@map("services")
}

model UserService {
    id        String   @id @default(cuid())
    userId    String   @unique
    serviceId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    service Service @relation(fields: [serviceId], references: [id])

    @@unique([userId, serviceId])
    @@map("user_services")
}

model KycDetail {
    id                String    @id @default(cuid())
    panNumber         String    @unique @db.VarChar(10)
    aadhaarNumber     String    @unique @db.VarChar(12)
    panImage          String
    aadhaarImageFront String
    aadhaarImageBack  String
    fatherName        String
    dob               String
    homeAddress       String    @db.LongText
    shopName          String    @db.LongText
    district          String
    state             String
    pinCode           String
    shopAddress       String    @db.LongText
    shopAddressImage  String
    kycStatus         KycStatus @default(PENDING)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])

    @@map("kyc_details")
}

model BankDetail {
    id            String   @id @default(cuid())
    userId        String   @unique
    accountHolder String
    accountNumber String   @unique
    ifscCode      String
    bankName      String?
    phone         String?
    passbookImage String?
    isVerified    Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    payouts Payout[]

    @@map("bank_details")
}

model Wallet {
    id        String   @id @default(cuid())
    userId    String   @unique
    balance   Float    @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("wallets")
}

model WalletTopup {
    id           String      @id @default(cuid())
    userId       String      @unique
    orderId      String      @unique
    paymentId    String?     @unique
    amount       Float
    provider     String
    paymentImage String?
    status       TopupStatus @default(PENDING)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("wallet_topups")
}

model UserLimit {
    id        String   @id @default(cuid())
    userId    String   @unique
    maxLimit  Float    @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user_limits")
}

model Commission {
    id        String         @id @default(cuid())
    userId    String         @unique
    roleId    String
    from      Float
    to        Float
    value     Float
    type      CommissionType
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id])
    service Service @relation(fields: [serviceId], references: [id])
    role    Role    @relation(fields: [roleId], references: [id])

    serviceId String

    @@map("commissions")
}

model Payout {
    id        String    @id @default(cuid())
    userId    String    @unique
    bankId    String
    amount    Float
    txnId     String
    status    TxnStatus @default(PENDING)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    user       User       @relation(fields: [userId], references: [id])
    bankDetail BankDetail @relation(fields: [bankId], references: [id])

    @@map("payouts")
}

model UserLog {
    id          String   @id @default(cuid())
    userId      String?  @unique
    action      String
    description String?
    ipAddress   String?
    userAgent   String?
    createdAt   DateTime @default(now())

    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("user_logs")
}

enum UserStatus {
    IN_ACTIVE
    ACTIVE
    DELETED
}

enum KycStatus {
    PENDING
    VERIFIED
    REJECTED
}

enum TopupStatus {
    PENDING
    VERIFIED
    REJECTED
}

enum TxnStatus {
    PENDING
    SUCCESS
    FAILED
}

enum CommissionType {
    FIXED
    PERCENT
}
